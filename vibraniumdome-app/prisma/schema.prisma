// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"] //TODO
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//

model APIToken {
  token     String   @unique
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, token])
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  userId String
  teamId String
  role   UserRole
  user   User     @relation(fields: [userId], references: [id])
  team   Team     @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  tokens        APIToken[]
  isActive      Boolean      @default(true)
}

model Team {
  id          String       @id @default(cuid())
  seq         Int          @default(autoincrement())
  name        String?
  memberships Membership[]
  policies    Policy[]

  @@index([seq])
}

model Policy {
  id          String   @id @default(cuid())
  seq         Int      @default(autoincrement())
  name        String
  createdBy   Team     @relation(fields: [createdById], references: [id])
  createdById String
  llmApp      String
  content     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([seq])
}
